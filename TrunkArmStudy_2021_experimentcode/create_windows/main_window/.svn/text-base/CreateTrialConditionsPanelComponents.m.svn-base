function panel = CreateTrialConditionsPanelComponents( panel )

%% Insert static text labels
textString = { 'State:', 'Mode:', '% Limb Weight:', '% Abduction Max:',...
    'Haptic effects:', 'Type:', 'Damper:', 'Coefficient in XY:', 'Set External Force',};

%text = zeros( 1, length(textString) );

textFromLeft = 1;    
textHeight = 1.923;

panelHeight = panel.panelPosition(4);
top = panelHeight - textHeight - 2; 
%spaceBetweenText = 5; 
%bottom = top - spaceBetweenText * length(textString);
textFromBottom = [top, top-3.5, top-7, top-9.5, top-13.5, top-19.5, top-23.5, top-26, top-30]; 

textWidth = 35;%[10, 11, 28, 32, 25, 20, 35, 35 ];    

for textIndex = 1:length(textString)
    textPosition = [ textFromLeft textFromBottom(textIndex) textWidth textHeight ];
    %panel.text(textIndex) = 
    CreateTextComponent( panel.handle, textPosition, textString(textIndex) );
end


%% Start and Abort buttons - switch to each having a pushbutton
% push button dimensions
pushButtonFromBottom = textFromBottom( end ) - 10;
pushButtonHeight = 2.538;

% position of start trialbutton
startTrialPushButtonFromLeft = textFromLeft;
startTrialPushButtonWidth = 20;
startTrialPushButtonPosition = [ startTrialPushButtonFromLeft, pushButtonFromBottom,...
    startTrialPushButtonWidth, pushButtonHeight ];

% create start trial button
panel.startTrialPushButton = CreatePushButtonComponent(...
        panel.handle, startTrialPushButtonPosition, 'Start Trial');
%set(panel.startTrialPushButton,'Enable','off');

% position of start set button
startSetPushButtonFromLeft = textFromLeft + startTrialPushButtonWidth;
startSetTrialPushButtonWidth = 20;
startSetPushButtonPosition = [ startSetPushButtonFromLeft, pushButtonFromBottom,...
    startSetTrialPushButtonWidth, pushButtonHeight ];

% create start trial button
panel.startSetPushButton = CreatePushButtonComponent(...
        panel.handle, startSetPushButtonPosition, 'Start Set');
set(panel.startSetPushButton,'Enable','off');

% position of abort button
abortPushButtonWidth = 14;
abortPushButtonFromLeft = startSetPushButtonFromLeft + startSetTrialPushButtonWidth;
abortPushButtonPosition = [ abortPushButtonFromLeft, pushButtonFromBottom,...
    abortPushButtonWidth, pushButtonHeight ];

% create abort button
panel.abortPushButton = CreatePushButtonComponent(...
        panel.handle, abortPushButtonPosition, 'Abort');
set(panel.abortPushButton,'Enable','off');    % abort will be enabled when experiments are running


%% Insert "State" pop-up menu
%stateString = {'Off','Initialise','Normal','Fixed','Fail'};
stateString = {'off','initialised'};
componentsFromLeft = max(textWidth) + 2;
statePopUpMenuFromBottom = textFromBottom(1)+1;
popUpMenuWidth = 24;
popUpMenuHeight = 1.538;

panel.statePopUpMenu = uicontrol('Parent', panel.handle,...
    'Style', 'popupmenu',...
    'Units','characters',...
    'Position', [ componentsFromLeft statePopUpMenuFromBottom popUpMenuWidth popUpMenuHeight ],...
    'String',stateString,...
    'HorizontalAlignment','left',...
    'FontSize',13.9);


%% Insert "Mode" pop-up menu
modeString = {'Workspace','Target'};
modePopUpMenuFromBottom = textFromBottom(2) + 1;

panel.modePopUpMenu = uicontrol('Parent', panel.handle,...
    'Style', 'popupmenu',...
    'Units','characters',...
    'Position', [ componentsFromLeft modePopUpMenuFromBottom popUpMenuWidth popUpMenuHeight ],...
    'String',modeString,...
    'HorizontalAlignment','left',...
    'FontSize',13.9);


%% percent limb weight edit box
editBoxWidth = 10;
editBoxHeight = 2.288;
percentLimbSupportEditBoxFromLeft = componentsFromLeft + 4;
percentLimbSupportEditBoxFromBottom = textFromBottom(3);
editBoxPosition = [ percentLimbSupportEditBoxFromLeft percentLimbSupportEditBoxFromBottom editBoxWidth editBoxHeight ];

panel.percentLimbSupportEditBox = CreateEditBoxComponent( panel.handle, editBoxPosition, '');
%set(panel.percentLimbSupportEditBox,'Enable','off');  % disable edit box


%% Percent abduction max edit box
percentAbductionMaxEditBoxFromBottom = textFromBottom(4);
editBoxPosition = [ componentsFromLeft+4 percentAbductionMaxEditBoxFromBottom editBoxWidth editBoxHeight ];
panel.percentAbductionMaxEditBox = CreateEditBoxComponent( panel.handle, editBoxPosition, '' );

%% Insert "Haptic table" toggle buttons
toggleWidth = 20;
toggleHeight = pushButtonHeight;

% horizontal toggle button
horizontalToggleButtonFromBottom = textFromBottom(5);
horizontalToggleButtonPosition = [componentsFromLeft horizontalToggleButtonFromBottom toggleWidth toggleHeight];
panel.horizontalToggleButton = CreateToggleButton( panel.handle, horizontalToggleButtonPosition, 'Horizontal' );

% vertical toggle button
verticalToggleButtonFromBottom = textFromBottom(5)-2.5;
verticalToggleButtonPosition = [componentsFromLeft verticalToggleButtonFromBottom toggleWidth toggleHeight];
panel.verticalToggleButton = CreateToggleButton( panel.handle, verticalToggleButtonPosition, 'Vertical' );

% lift toggle button
liftToggleButtonFromBottom = textFromBottom(6);
liftToggleButtonPosition = [componentsFromLeft liftToggleButtonFromBottom toggleWidth toggleHeight];
panel.liftToggleButton = CreateToggleButton( panel.handle, liftToggleButtonPosition, 'Lift' );

%% Insert damper components
% toggle button
damperToggleButtonFromBottom = textFromBottom(7);
damperToggleButtonPosition = [componentsFromLeft damperToggleButtonFromBottom toggleWidth toggleHeight];
panel.damperToggleButton = CreateToggleButton( panel.handle, damperToggleButtonPosition, 'Damper' );

% coeffiecient edit box
coefficientEditBoxFromBottom = textFromBottom(8);
editBoxPosition = [ componentsFromLeft+4 coefficientEditBoxFromBottom editBoxWidth editBoxHeight ];
panel.coefficientEditBox = CreateEditBoxComponent( panel.handle, editBoxPosition, '0' );


%% insert set external force text and edit boxes
% text
textWidth = 4;
textFromLeft = componentsFromLeft - 2;
externalForceFromBottom = textFromBottom(9) : -3 : textFromBottom(9)-6;
textString = { 'X:', 'Y:', 'Z:' };

for j = 1 : length( textString )
    textPosition = [ textFromLeft externalForceFromBottom(j) textWidth textHeight ];
    CreateTextComponent( panel.handle, textPosition, textString(j) );
end

% edit boxes
editBoxFromLeft = textFromLeft + textWidth + 1;
for j = 1 : length(textString)
    editBoxPosition = [ editBoxFromLeft externalForceFromBottom(j) editBoxWidth editBoxHeight ];
    panel.externalForceEditBox(j) = CreateEditBoxComponent( panel.handle, editBoxPosition, '0' );
end
%set( panel.externalForceEditBox(:), 'Enable', 'off');

% units for external forces (newtons)
unitFromLeft = editBoxFromLeft + editBoxWidth + 1;
for j = 1 : length(textString)
    textPosition = [ unitFromLeft externalForceFromBottom(j) textWidth textHeight ];
    CreateTextComponent( panel.handle, textPosition, 'N' );
end



end
