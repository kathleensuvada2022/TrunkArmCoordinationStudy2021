%% function declaring the callback functions for each component
function mainWindow = CreateDaqParametersPanelCallbacks( mainWindow, emgChannels, experiment, trialParameters, nidaq, quanser )

daqParametersPanel = mainWindow.daqParametersPanel;

set(daqParametersPanel.daqSwitchCheckBox,'Callback',{@daqSwitchCheckBox_Callback,mainWindow});

set(daqParametersPanel.daqChannelsEditBox,'Callback',{@daqChannelsEditBox_Callback,mainWindow});
set(daqParametersPanel.samplingRateEditBox,'Callback',{@samplingRateEditBox_Callback,mainWindow});
set(daqParametersPanel.samplingTimeEditBox,'Callback',{@samplingTimeEditBox_Callback,mainWindow});

set(daqParametersPanel.emgMaxesCheckBox,'Callback',{@emgMaxesCheckBox_Callback,mainWindow,experiment, emgChannels});

set(daqParametersPanel.filenameEditBox,'Callback',{@filenameEditBox_Callback,mainWindow});

set(daqParametersPanel.initializeDaqPushButton,'Callback',{@initializeDaqPushButton_Callback,mainWindow,emgChannels,nidaq,quanser});
set(daqParametersPanel.recordEmgMaxesPushButton,'Callback',{@recordEmgMaxesPushButton_Callback,mainWindow,emgChannels,experiment,trialParameters,nidaq,quanser});

end


%% callbacks
function daqSwitchCheckBox_Callback(hObject, eventdata, mainWindow)
% turn on all components in the daq parameters panel
% when checked, require daq to be initialized to start a trial
end

function daqChannelsEditBox_Callback(hObject, eventdata, mainWindow)

end

function samplingRateEditBox_Callback(hObject, eventdata, mainWindow)
end

function samplingTimeEditBox_Callback(hObject, eventdata, mainWindow)
end


function emgMaxesCheckBox_Callback(hObject, eventdata, mainWindow, experiment, emgChannels )

% write emg channel labels to excel file
if get(hObject,'Value')
    %currentTrial = str2double(get( mainWindow.statusPanel.secondColumn(5), 'String' ));
    experiment.emgMaxesExcelHandle = ddeinit( 'excel', 'Sheet1' );
    while experiment.emgMaxesExcelHandle==0, 
        uiwait( warndlg( 'Open the MS Excel Program and then click OK', 'Copy EMG maxes to Excel', 'modal' ) );
        experiment.emgMaxesExcelHandle = ddeinit( 'excel', 'Sheet1' );   
    end
    
    rc = ddepoke( experiment.emgMaxesExcelHandle, 'r1c1:r1c1','EMG Ch' );
    totalDaqChannels = str2double( get( mainWindow.daqParametersPanel.daqChannelsEditBox, 'String' ) );
    for i=1:totalDaqChannels
        emgChannelName = char( get( emgChannels.labels(i), 'String' ) );
        location = ['r' num2str(i+1) 'c1:r' num2str(i+1) 'c1'];
        rc = ddepoke( experiment.emgMaxesExcelHandle, location, emgChannelName );
    end
else
    ddeterm(experiment.emgMaxesExcelHandle);
end

end

function filenameEditBox_Callback(hObject, eventdata, mainWindow)
end

function initializeDaqPushButton_Callback(hObject, eventdata, mainWindow, emgChannels, nidaq, quanser )

daqParametersPanel = mainWindow.daqParametersPanel;

daqDeviceString = get(daqParametersPanel.daqDevicePopUpMenu,'String');
daqDeviceValue = get(daqParametersPanel.daqDevicePopUpMenu,'Value');
daqDeviceSelected = daqDeviceString{daqDeviceValue};

samplingRate = str2double( get( daqParametersPanel.samplingRateEditBox, 'String' ) );
samplingTime = str2double( get( daqParametersPanel.samplingTimeEditBox, 'String' ) );
totalEmgChannels = str2double( get( daqParametersPanel.daqChannelsEditBox, 'String' ) );

if strcmp(daqDeviceSelected,'Quanser')
    quanser.samples = samplingTime * samplingRate;
    quanser.channels = (1 : totalEmgChannels)+4;
    quanser.frequency = samplingRate;
    quanser.Initialize;

else
    nidaq.Initialize( daqParametersPanel, samplingRate, samplingTime );
    nidaq.AddChannels( totalEmgChannels, emgChannels );
	
end

set( mainWindow.trialConditionsPanel.startTrialPushButton, 'Enable', 'on' );
set( mainWindow.trialConditionsPanel.startSetPushButton, 'Enable', 'on' );

disp('DAQ initialized');

end



function recordEmgMaxesPushButton_Callback(hObject, eventdata, mainWindow,emgChannels, experiment, trialParameters, nidaq, quanser )

statusPanel = mainWindow.statusPanel;
daqParametersPanel = mainWindow.daqParametersPanel;

% set filename
trialNumber = get(statusPanel.secondColumn(5),'String');
if iscell(trialNumber)
    trialNumber = trialNumber{1};
end
filename = [ 'emg_maxes_' trialNumber ];

%% begin recording EMG data and wait for the specified sampling time
daqDeviceString = get(daqParametersPanel.daqDevicePopUpMenu,'String');
daqDeviceValue = get(daqParametersPanel.daqDevicePopUpMenu,'Value');
daqDeviceSelected = daqDeviceString{daqDeviceValue};
if strcmp(daqDeviceSelected,'Quanser')
    quanser.Start;

else  % nidaq
    set(nidaq.analogInputObject, 'LogFileName', [ filename '.daq' ] );
    nidaq.Start;

end

pauseTime = str2double(get( daqParametersPanel.samplingTimeEditBox, 'String' ));
pause(pauseTime);


%% plot emgs
if strcmp(daqDeviceSelected,'Quanser')
    quanser.Stop;
    [ data, samples_read ] = quanser.ReadData;
    data = data';
    t = (1:length(data(:,1))) / quanser.frequency;
    
    % save data
    % folder
    folder = get( mainWindow.statusPanel.secondColumn(11), 'String');
    if iscell(folder)
        folder = folder{1};
    end

    save( [folder '\' filename ], 'data' );

else  % nidaq
    [data,t] = getdata(nidaq.analogInputObject);
end
samplingRate = str2double( get( daqParametersPanel.samplingRateEditBox, 'String' ) );
meandata = experiment.meanfilt( abs(data), 0.25*samplingRate );

for i=1:size(data,2)

    % clear selected axes
    cla(emgChannels.axis(i));

    % plot data on axes using line
    axes(emgChannels.axis(i));
    line(t,data(:,i));
    drawnow
    
    % label axes with max of data and max of filtered data
    maxRawData = max(abs(data(:,i)));
    maxFilteredData = max(meandata(:,i));
    x = length(data(:,1))/samplingRate*0.6;
    y = maxRawData;
    text( x,y, num2str(maxRawData,'%6.4f') );
    x = length(data(:,1))/samplingRate*0.8;
    text( x,y, num2str(maxFilteredData,'%6.4f') );
end


%% trials completed is incremented and replaced
newTrialNumber = experiment.IncrementTrialNumber( str2double(trialNumber), statusPanel.secondColumn(5) );

%% Determine whether to conduct more trials
totalTrialsNumber = str2double( get(statusPanel.totalTrials,'String') );
if newTrialNumber >= totalTrialsNumber
    experiment.RunMoreTrials( trialParameters.figureHandle, statusPanel.secondColumn(5) );
end

disp('EMG maxes trial complete');

end


