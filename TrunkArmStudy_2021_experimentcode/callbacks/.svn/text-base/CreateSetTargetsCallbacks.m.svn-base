function setTargets = CreateSetTargetsCallbacks(...
    initializeRobot, mainWindow, participantParameters, setTargets,...
    robot, haptic, display, judp )


set(setTargets.elbowExtensionRadioButton,...
    'Callback',{@elbowExtensionRadioButton_Callback,mainWindow,setTargets, display });
set(setTargets.reachRadioButton,...
    'Callback',{@reachRadioButton_Callback,mainWindow,setTargets, display});
set(setTargets.shoulderFlexionRadioButton,...
    'Callback',{@shoulderFlexionRadioButton_Callback,mainWindow,setTargets, display });
set(setTargets.elbowFlexionRadioButton,...
    'Callback',{@elbowFlexionRadioButton_Callback,mainWindow,setTargets, display });
set(setTargets.retrieveRadioButton,...
    'Callback',{@retrieveRadioButton_Callback,mainWindow,setTargets, display });
set(setTargets.customRadioButton,...
    'Callback',{@customRadioButton_Callback,mainWindow,setTargets, display});


set(setTargets.xEditBox,...
    'Callback',{@positionEditBox_Callback,mainWindow});
set(setTargets.yEditBox,...
    'Callback',{@positionEditBox_Callback,mainWindow});
set(setTargets.zEditBox,...
    'Callback',{@positionEditBox_Callback,mainWindow});
set(setTargets.shoulderFlexionAngleEditBox,...
    'Callback',{@angleEditBox_Callback,mainWindow, setTargets,display, judp});
set(setTargets.elbowAngleEditBox,...
    'Callback',{@angleEditBox_Callback,mainWindow, setTargets,display, judp});
set(setTargets.shoulderAbductionAngleEditBox,...
    'Callback',{@angleEditBox_Callback,mainWindow, setTargets,display, judp});

set(setTargets.okPushButton,...
    'Callback',{@okPushButton_Callback,mainWindow,setTargets,display});
set(setTargets.cancelPushButton,...
    'Callback',{@cancelPushButton_Callback,mainWindow,setTargets,display});

set( setTargets.figureHandle, 'CloseRequestFcn', @(x,y)disp('Please click OK or Cancel') );

end


function elbowExtensionRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )
% set shoulder flexion, elbow flexion, and shoulder abduction angles and
% the corresponding x, y, and z values


shoulderFlexionAngle = '40';
elbowFlexionAngle = '10';
shoulderAbductionAngle = '90';

radioCallback( setTargets, shoulderFlexionAngle, elbowFlexionAngle,...
    shoulderAbductionAngle, mainWindow, display, hObject );
%{
set( setTargets.shoulderFlexionAngleEditBox, 'String', shoulderFlexionAngle );
set( setTargets.elbowFlexionAngleEditBox, 'String', elbowFlexionAngle );
set( setTargets.ShoulderAbductionAngleEditBox, 'String', shoulderAbductionAngle );

arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
if iscell(arm)
    arm = arm{1};
end

% set target position on figure
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle );

%[sphereX,sphereY,sphereZ] = display.ComputeSphere( display.radius, display.target.position );
%set( display.targetSphereHandle, 'XData',sphereX, 'YData',sphereY, 'ZData',sphereZ );
% set target position in blender
% send 'target position x y z'

% set target position in edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );

% make the current object the selected object in case radio button was unclicked
set( setTargets.targetsButtonGroup, 'SelectedObject', hObject );
%}

end


function reachRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )
% set shoulder flexion, elbow flexion, and shoulder abduction angles and
% the corresponding x, y, and z values


shoulderFlexionAngle = '70';
elbowFlexionAngle = '10';
shoulderAbductionAngle = '90';

radioCallback( setTargets, shoulderFlexionAngle, elbowFlexionAngle,...
    shoulderAbductionAngle, mainWindow, display, hObject );

%{
set( setTargets.shoulderFlexionAngleEditBox, 'String', shoulderFlexionAngle );
set( setTargets.elbowFlexionAngleEditBox, 'String', elbowFlexionAngle );
set( setTargets.ShoulderAbductionAngleEditBox, 'String', shoulderAbductionAngle );

arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
if iscell(arm)
    arm = arm{1};
end

% set target position on figure
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle );

%[sphereX,sphereY,sphereZ] = display.ComputeSphere( display.radius, display.target.position );
%set( display.targetSphereHandle, 'XData',sphereX, 'YData',sphereY, 'ZData',sphereZ );
% set target position in blender
% send 'target position x y z'

% set target position in edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );

% make the current object the selected object in case radio button was unclicked
set( setTargets.targetsButtonGroup, 'SelectedObject', hObject );
%}
end


function shoulderFlexionRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )
% set shoulder flexion, elbow flexion, and shoulder abduction angles and
% the corresponding x, y, and z values


shoulderFlexionAngle = '100';
elbowFlexionAngle = '110';
shoulderAbductionAngle = '90';

radioCallback( setTargets, shoulderFlexionAngle, elbowFlexionAngle,...
    shoulderAbductionAngle, mainWindow, display, hObject );
%{
set( setTargets.shoulderFlexionAngleEditBox, 'String', shoulderFlexionAngle );
set( setTargets.elbowFlexionAngleEditBox, 'String', elbowFlexionAngle );
set( setTargets.ShoulderAbductionAngleEditBox, 'String', shoulderAbductionAngle );

arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
if iscell(arm)
    arm = arm{1};
end

% set target position on figure
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle );

%[sphereX,sphereY,sphereZ] = display.ComputeSphere( display.radius, display.target.position );
%set( display.targetSphereHandle, 'XData',sphereX, 'YData',sphereY, 'ZData',sphereZ );
% set target position in blender
% send 'target position x y z'

% set target position in edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );

% make the current object the selected object in case radio button was unclicked
set( setTargets.targetsButtonGroup, 'SelectedObject', hObject );
%}
end


function elbowFlexionRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )
% --- NOT YET IMPLEMENTED - CURRENTLY DISABLED ---
% change axes to display elbow extension target and make all other targets invisible
end


function retrieveRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )
% --- NOT YET IMPLEMENTED - CURRENTLY DISABLED ---
% change axes to display elbow extension target and make all other targets invisible
end


function customRadioButton_Callback(hObject, eventdata, mainWindow, setTargets, display )

shoulderFlexionAngle = str2double( get( setTargets.shoulderFlexionAngleEditBox, 'String' ) );
elbowAngle = str2double( get( setTargets.elbowAngleEditBox, 'String' ) );
shoulderAbductionAngle = str2double( get( setTargets.shoulderAbductionAngleEditBox, 'String' ) );

radioCallback( setTargets, shoulderFlexionAngle, elbowFlexionAngle,...
    shoulderAbductionAngle, mainWindow, display, hObject )
%{
arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
arm = arm{1};

% compute and set target position
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle );

% make the current object the selected object in case radio button was unclicked
set( setTargets.targetsButtonGroup, 'SelectedObject', hObject );

% set x, y, and z edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );
%}
end

function radioCallback( setTargets, shoulderFlexionAngle, elbowFlexionAngle,...
    shoulderAbductionAngle, mainWindow, display, hObject )

set( setTargets.shoulderFlexionAngleEditBox, 'String', shoulderFlexionAngle );
set( setTargets.elbowFlexionAngleEditBox, 'String', elbowFlexionAngle );
set( setTargets.ShoulderAbductionAngleEditBox, 'String', shoulderAbductionAngle );

arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
if iscell(arm)
    arm = arm{1};
end

% set target position on figure
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle );

%[sphereX,sphereY,sphereZ] = display.ComputeSphere( display.radius, display.target.position );
%set( display.targetSphereHandle, 'XData',sphereX, 'YData',sphereY, 'ZData',sphereZ );
% set target position in blender
% send 'target position x y z'

% set target position in edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );

% make the current object the selected object in case radio button was unclicked
set( setTargets.targetsButtonGroup, 'SelectedObject', hObject );
end

function positionEditBox_Callback(hObject, eventdata, mainWindow )
% --- NOT YET IMPLEMENTED - CURRENTLY DISABLED ---
% change target location on axes
%{
%shoulderFlexionAngle = str2double( get( setTargets.shoulderFlexionAngleEditBox, 'String' ) );
%elbowAngle = str2double( get( setTargets.elbowAngleEditBox, 'String' ) );
%shoulderAbductionAngle = str2double( get( setTargets.shoulderAbductionAngleEditBox, 'String' ) );
if ( shoulderAngle ~= 0  &&  elbowAngle ~= 0 )
    x=0;
    y=0;

else
    % compute forward kinematics for right arm to determine target position
    targetX = upperArmLength*cos(shoulderAngle) + lowerArmLength*cos(elbowAngle+shoulderAngle);
    targetY = upperArmLength*sin(shoulderAngle) + lowerArmLength*sin(elbowAngle+shoulderAngle);
    if strcmp(arm,'Left')
        targetX = -targetX;
    end

end
%}

% set target position

end


function angleEditBox_Callback(hObject, eventdata, mainWindow, setTargets, display, judp )

shoulderFlexionAngle =  get( setTargets.shoulderFlexionAngleEditBox, 'String' );
shoulderFlexionAngle = str2double(shoulderFlexionAngle) *pi/180;

elbowAngle = get( setTargets.elbowAngleEditBox, 'String' );
elbowAngle = str2double(elbowAngle) *pi/180;

shoulderAbductionAngle = get( setTargets.shoulderAbductionAngleEditBox, 'String' );
shoulderAbductionAngle = str2double(shoulderAbductionAngle) *pi/180;
shoulderAbductionAngle = shoulderAbductionAngle - pi/2;

arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
if iscell(arm)
    arm = arm{1};
end

% set target position on figure
% change this function
display.SetTargetPosition( arm, shoulderFlexionAngle, elbowAngle, shoulderAbductionAngle, judp );

% 
%[sphereX,sphereY,sphereZ] = display.ComputeSphere( display.radius, display.target.position );
%set( display.targetSphereHandle, 'XData',sphereX, 'YData',sphereY, 'ZData',sphereZ );
% set target position in blender

% set target position in edit boxes
set( setTargets.xEditBox, 'String', num2str(display.target.position(1)) );
set( setTargets.yEditBox, 'String', num2str(display.target.position(2)) );
set( setTargets.zEditBox, 'String', num2str(display.target.position(3)) );

% make the selected target equal to custom, since an angle was entered
set( setTargets.targetsButtonGroup, 'SelectedObject', setTargets.customRadioButton );

end


function okPushButton_Callback(hObject, eventdata, mainWindow, setTargets, display )

% save target in the figure handle properties
targetObject = get( setTargets.targetsButtonGroup, 'SelectedObject' );
setappdata(setTargets.figureHandle, 'target',targetObject );

% save the current target choice in the status panel of the main window
targetChoice = get( targetObject, 'String' );
set( mainWindow.statusPanel.secondColumn(7), 'String', targetChoice );

% get x and y and save them to target position
targetPositionX = str2double( get( setTargets.xEditBox, 'String' ) );
targetPositionY = str2double( get( setTargets.yEditBox, 'String' ) );
targetPositionZ = str2double( get( setTargets.zEditBox, 'String' ) );
display.target.position = [ targetPositionX, targetPositionY, targetPositionZ ];

% make this window invisible
set( setTargets.figureHandle, 'Visible','Off', 'WindowStyle','modal' );

end


function cancelPushButton_Callback(hObject, eventdata, mainWindow, setTargets, display)

% revert target selection to previous selection, x, y, and angle boxes to
% previous values
targetObject = getappdata(setTargets.figureHandle,'target');
set( setTargets.targetsButtonGroup, 'SelectedObject', targetObject );

% revert target choice and position to previous values - temp
targetChoice = get( targetObject, 'String' );
customRadioButton_Callback( targetObject, [], mainWindow, setTargets, display );

% make this window invisible
set( setTargets.figureHandle, 'Visible','Off', 'WindowStyle','normal' );

end



