install.packages("Rcmdr")
library(Rcmdr)
ls -l /Library/Frameworks/R.framework/Versions/
clc
#a #i
6*3
6^3
exp^6
exp6
exp(6)
(10/2)>6
#c
pnorm(-.85)
library(Rcmdr)
library(RcmdrMisc)
help qnorm
help(qnorm)
#E
c(1,2,3,4,5)
t(c(1,2,3,4,5))
t(t(c(1,2,3,4,5)))
matrix(c(1,2,3,4,5,6)nrow =3, ncol =2)
matrix(c(1,2,3,4,5,6),nrow =3, ncol =2)
install.packages(foreign)
install.packages("foreign")
install.packages("foreign")
install.packages("psych")
install.packages("dplyr")
install.packages("reshape")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("car")
install.packages("emmeans")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("Rcmdr")
library(Rcmdr)
library(readr)
Cars93 <- read_csv("Desktop/Summer2020/Summer_2020_R/Module3/Homework/Cars93.csv")
View(Cars93)
#a
plot(Cars93$Min.Price,Cars93$Max.Price)
#a
plot(Cars93$Min.Price,Cars93$Max.Price,xlab ="Min Price",ylab="Max Price")
#a
plot(Cars93$Min.Price,Cars93$Max.Price,xlab ="Min Price",ylab="Max Price",xlim =c(5,50))
#a
plot(Cars93$Min.Price,Cars93$Max.Price,main="Maximum v. Minimum Price",xlab ="Min Price",ylab="Max Price",xlim =c(5,50))
abline(lm(Cars93$Min.Price ~ Cars93$Max.Price)
abline(lm(Cars93$Min.Price ~ Cars93$Max.Price))
abline(lm(Cars93$Min.Price~Cars93$Max.Price))
abline(lm(Cars93$Max.Price~Cars93$Min.Price))
abline(lm(Cars93$Max.Price~Cars93$Min.Price))
library(readr)
CountyLong <- read_csv("Desktop/Summer2020/Summer_2020_R/Module3/Homework/CountyLong.csv")
View(CountyLong)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggthemes")
library(ggthemes)
ggplot(CountyLong,aes(x=Year,y=Jobs,Color=County))
ggplot(CountyLong,aes(x=Year,y=Jobs,Color=County))+geom_line()+geom_point()+theme_few()
ggplot(CountyLong,aes(x=Year,y=Jobs,Color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")
ggplot(CountyLong,aes(x=Year,y=Jobs,Color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")+guides(color=TRUE)
ggplot(CountyLong,aes(x=Year,y=Jobs,Color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")+guides(color=FALSE)
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")
ggplot(CountyLong,aes(x=year,y=Jobs,color=County))
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geompoint()
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geompoint()+theme_few()
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geom_point()+theme_few()
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")
ggplot(CountyLong,aes(x=Year,y=Jobs,color=County))+geom_line()+geom_point()+theme_few()+scale_x_continuous(name="Year")
t.test(Cars93$Price,mu=20,alternative="greater")
shapiro.test(Cars93$Price)
hist(Cars93$Price)
qqnorm(Cars93$Price)
knitr::opts_knit$set(root.dir = "~/Desktop/Summer2020/Summer_2020_R/Module4/Homework")
model2<- lm(RPM~DriveTrain,data=Cars93)
View(model2)
View(model2)
summary(model2)
anova(model2)
ggplot(data=eigen.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", eigen.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", eigen.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("eigen on cov(t(data.matrix))")
library(psych)
## In this example, the data is in a matrix called
## data.matrix
## columns are individual samples (i.e. cells)
## rows are measurements taken for all the samples (i.e. genes)
## Just for the sake of the example, here's some made up data...
data.matrix <- matrix(nrow=100, ncol=10)
colnames(data.matrix) <- c(
paste("wt", 1:5, sep=""),
paste("ko", 1:5, sep=""))
rownames(data.matrix) <- paste("gene", 1:100, sep="")
for (i in 1:100) {
wt.values <- rpois(5, lambda=sample(x=10:1000, size=1))
ko.values <- rpois(5, lambda=sample(x=10:1000, size=1))
data.matrix[i,] <- c(wt.values, ko.values)
}
head(data.matrix)
dim(data.matrix)
pca <- prcomp(t(data.matrix), scale=TRUE)
## plot pc1 and pc2
plot(pca$x[,1], pca$x[,2])
## make a scree plot
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree Plot", xlab="Principal Component", ylab="Percent Variation")
## now make a fancy looking plot that shows the PCs and the variation:
library(ggplot2)
pca.data <- data.frame(Sample=rownames(pca$x),
X=pca$x[,1],
Y=pca$x[,2])
pca.data
###Use the psych package to request for multiple variables
install.packages("psych")
install.packages("psych")
library(psych)
ggplot(data=pca.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("My PCA Graph")
## get the name of the top 10 measurements (genes) that contribute
## most to pc1.
loading_scores <- pca$rotation[,1]
gene_scores <- abs(loading_scores) ## get the magnitudes
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes ## show the names of the top 10 genes
pca$rotation[top_10_genes,1] ## show the scores (and +/- sign)
svd.stuff <- svd(scale(t(data.matrix), center=TRUE))
## calculate the PCs
svd.data <- data.frame(Sample=colnames(data.matrix),
X=(svd.stuff$u[,1] * svd.stuff$d[1]),
Y=(svd.stuff$u[,2] * svd.stuff$d[2]))
svd.data
## alternatively, we could compute the PCs with the eigen vectors and the
## original data
svd.pcs <- t(t(svd.stuff$v) %*% t(scale(t(data.matrix), center=TRUE)))
svd.pcs[,1:2] ## the first to principal components
svd.df <- ncol(data.matrix) - 1
svd.var <- svd.stuff$d^2 / svd.df
svd.var.per <- round(svd.var/sum(svd.var)*100, 1)
ggplot(data=svd.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", svd.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", svd.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("svd(scale(t(data.matrix), center=TRUE)")
############################################
##
## Now let's do the same thing with eigen()
##
## eigen() returns two things...
## vectors = eigen vectors (vectors of loading scores)
##           NOTE: pcs = sum(loading scores * values for sample)
## values = eigen values
##
############################################
cov.mat <- cov(scale(t(data.matrix), center=TRUE))
dim(cov.mat)
## since the covariance matrix is symmetric, we can tell eigen() to just
## work on the lower triangle with "symmetric=TRUE"
eigen.stuff <- eigen(cov.mat, symmetric=TRUE)
dim(eigen.stuff$vectors)
head(eigen.stuff$vectors[,1:2])
eigen.pcs <- t(t(eigen.stuff$vectors) %*% t(scale(t(data.matrix), center=TRUE)))
eigen.pcs[,1:2]
eigen.data <- data.frame(Sample=rownames(eigen.pcs),
X=(-1 * eigen.pcs[,1]), ## eigen() flips the X-axis in this case, so we flip it back
Y=eigen.pcs[,2]) ## X axis will be PC1, Y axis will be PC2
eigen.data
eigen.var.per <- round(eigen.stuff$values/sum(eigen.stuff$values)*100, 1)
ggplot(data=eigen.data, aes(x=X, y=Y, label=Sample)) +
geom_text() +
xlab(paste("PC1 - ", eigen.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", eigen.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("eigen on cov(t(data.matrix))")
install.packages("shiny")
library(lme4)
install.packages(c("lme4", "tidyverse", "merTools", "glmmTMB", "brms", "modelr", "nlme"))
help glmer
clear
c
install.packages("tidyverse")
clc
library(xlsx)
install.packages(c("xlsx", "rstatix", "reshape", "tidyverse", "dplyr", "ggpubr", "plyr", "datarium"))
library(xlsx)
library(rstatix)
library(reshape)
library(tidyverse)
install.packages("readxl")
library(tidyverse)
install.packages("readxl")
library(tidyverse)
library(dplyr)
library(ggpubr)
library(plyr)
library(datarium)
data<-read.xlsx("D:/RStudio/data.xlsx",sheetName="Sheet1")
df <- data.frame(patient=rep(1:5, each=4),
drug=rep(1:4, times=5),
response=c(30, 28, 16, 34,
14, 18, 10, 22,
24, 20, 18, 30,
38, 34, 20, 44,
26, 28, 14, 30))
df <- data.frame(patient=rep(1:5, each=4),
drug=rep(1:4, times=5),
response=c(30, 28, 16, 34,
14, 18, 10, 22,
24, 20, 18, 30,
38, 34, 20, 44,
26, 28, 14, 30))
df
model <- aov(response~factor(drug)+Error(factor(patient)), data = df)
# Summary
summary(model)
library(readxl)
AllData_Stroke_Paretic <- read_excel("Desktop/Stroke/Paretic/AllData_Stroke_Paretic.xlsx")
View(AllData_Stroke_Paretic)
#create data
df <- data.frame(patient=rep(1:5, each=4),
drug=rep(1:4, times=5),
response=c(30, 28, 16, 34,
14, 18, 10, 22,
24, 20, 18, 30,
38, 34, 20, 44,
26, 28, 14, 30))
View(df)
library(readxl)
AllData_Stroke_Paretic <- read_excel("Desktop/Stroke/Paretic/AllData_Stroke_Paretic.xlsx",
col_types = c("text", "numeric", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(AllData_Stroke_Paretic)
AllData_Stroke_Paretic
library(readxl)
AllData_Stroke_Paretic <- read_excel("Desktop/Stroke/Paretic/AllData_Stroke_Paretic.xlsx")
View(AllData_Stroke_Paretic)
View(df)
df = data.frame(AllData_Stroke_Paretic)
View(df)
Data_Paretic = data.frame(AllData_Stroke_Paretic)
View(Data_Paretic)
X.Condition.
X.Condition
NormArmLength_TR
df <- data.frame(patient=rep(1:5, each=4),
drug=rep(1:4, times=5),
response=c(30, 28, 16, 34,
14, 18, 10, 22,
24, 20, 18, 30,
38, 34, 20, 44,
26, 28, 14, 30))
Data_Paretic<-data.frame(AllData_Stroke_Paretic)
library(readxl)
AllData_Stroke_Paretic <- read_excel("Desktop/Stroke/Paretic/AllData_Stroke_Paretic.xlsx")
View(AllData_Stroke_Paretic)
Data_Paretic<-data.frame(AllData_Stroke_Paretic)
View(df)
View(Data_Paretic)
View(df)
patient
df.patient
df
factor(patient)
# independent variable is drug
# repeated measure is patient
# Measuring  response.
model <- aov(response~factor(drug)+Error(factor(patient)), data = df)
View(df)
# independent variable is drug
# repeated measure is patient
# Measuring  response.
model <- aov(response~factor(X.Condition.)+Error(factor(patient)), data = df)
# independent variable is drug
# repeated measure is patient
# Measuring  response.
model <- aov(NormArmlength_TR~factor(X.Condition.)), data = Data_Paretic)
model <- aov(X.Hand.Disp~factor(X.Condition.)+Error(factor(X.Partid.)), data = Data_Paretic)
model <- aov(NormArmlength_RD~factor(X.Condition.)+Error(factor(X.Partid.)), data = Data_Paretic)
model <- aov(NormArmlength_RD.~factor(X.Condition.)+Error(factor(X.Partid.)), data = Data_Paretic)
summary(model)
# BELOW ACTUALLY RAN!!!!!
model1 <- aov(NormArmlength_RD.~factor(X.Condition.)+Error(factor(X.Partid.)), data = Data_Paretic)
#create data
df <- data.frame(patient=rep(1:5, each=4),
drug=rep(1:4, times=5),
response=c(30, 28, 16, 34,
14, 18, 10, 22,
24, 20, 18, 30,
38, 34, 20, 44,
26, 28, 14, 30))
# independent variable is drug
# repeated measure is patient
# Measuring  response.
model <- aov(response~factor(drug)+Error(factor(patient)), data = df)
# Summary
summary(model)
# BELOW ACTUALLY RAN!!!!!
model1 <- aov(NormArmlength_RD.~factor(X.Condition.)+Error(factor(X.Partid.)), data = Data_Paretic)
summary(model1)
clc
