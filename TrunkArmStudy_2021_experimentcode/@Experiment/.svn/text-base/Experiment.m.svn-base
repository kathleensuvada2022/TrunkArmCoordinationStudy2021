classdef Experiment < handle
    %EXPERIMENT Summary of this class goes here
    %   Detailed explanation goes here
    
    %% properties
    properties
        duration = 15;  % seconds
        currentIteration=0;
        currentPeriod = 0;
        currentTrialTime = 0;
        periodId = 0;
        iterationId = 0;
        isStartSetSelected = 0;
        tableZ = 0;
        isArmCloseToTable = 0;
        isArmOnTable = 0;
        isRecordingData = 0;
        isPreTrial = 0;
        emgMaxesExcelHandle = 0;
        
        % variables saved: sample, duration between current and previous samples,
        % xyz end effector position, xyz velocity, xyz force, xyz torque,
        % shoulder flexion angle, elbow flexion angle, shoulder abduction
        % angle, xyz hand position, boolean telling if arm is on the table
        numberOfVariables = 25;
        
        totalIterations;
        data;% = zeros( 20, 15 );
        participantForce = zeros(3,3000);
    end
    
    %% methods
    methods
        %% constructor
        function obj = Experiment( timerFrequency, obj )
            obj.totalIterations = obj.duration * timerFrequency;     % iterations for the duration of the experiment
            obj.data = zeros( obj.numberOfVariables, obj.totalIterations );
        end
        
        function delete(obj)
        end
        
        %% start experiment
        function obj = Start(obj, mainWindow, display, setTargets, nidaq, quanser, judp )
            trialConditionsPanel = mainWindow.trialConditionsPanel;
            statusPanel = mainWindow.statusPanel;
            
            obj.Initialize(trialConditionsPanel,...
                mainWindow.experimentMenubar, mainWindow.statusPanel.secondColumn(10));
            
            % figure out and set filename
            modeString = get(trialConditionsPanel.modePopUpMenu,'String');
            modeValue = get(trialConditionsPanel.modePopUpMenu,'Value');
            currentMode = modeString{modeValue};
            
            trial = get( statusPanel.secondColumn(5), 'String' );
            if iscell(trial), trial = trial{1};  end
            
            percentAbdMax = get(trialConditionsPanel.percentAbductionMaxEditBox,'String');
            if isempty(percentAbdMax)
                mvt = 'table';
            else
                percentAbdMax = num2str(round(str2double(percentAbdMax)));
                mvt = [ 'mvt_' percentAbdMax ];
            end
            
            
            if strcmp(currentMode,'Target')
                % set filename if target
                targetObject = get( setTargets.targetsButtonGroup, 'SelectedObject' );
                targetString = get( targetObject, 'String' );
                
                filename = [ currentMode '_' trial '_' targetString '_' mvt ];
            
                
            else
                % set filename if workspace
                filename = [ currentMode '_' trial '_' mvt ];
                
            end
            
            set( mainWindow.daqParametersPanel.filenameEditBox, 'String', filename );
            
            % run experiment according to the current mode
            %set(display.homeSphereHandle, 'Visible','on' );
            % make the home position visible
			% send 'home visible on'
			% display.home.visible = 1
            judp.Write('home visible on');
            obj.isPreTrial = 1;
            
            % start to record EMG data and display the EMG data after the recoding is finished
			daqDeviceString = get(mainWindow.daqParametersPanel.daqDevicePopUpMenu,'String');
			daqDeviceValue = get(mainWindow.daqParametersPanel.daqDevicePopUpMenu,'Value');
			daqDeviceSelected = daqDeviceString{daqDeviceValue};

			% set filename for emg data and start acquiring EMG data
            %{
            if strcmp(daqDeviceSelected,'Quanser')
			    quanser.Start;
			    
			else  % nidaq
			    set(nidaq.analogInputObject, 'LogFileName', [ filename '.daq' ] );
			    nidaq.Start;
			end
            %}
        end
        
        %% initialize interface on experiment start
        function obj = Initialize(obj, trialConditionsPanel, experimentMenubar, experimentStatus )
            % enable abort button to allow for ending experiments early.  Disable all
            % other buttons that could affect the HapticMaster during the experiment
            set(trialConditionsPanel.startTrialPushButton,'Enable','off');
            set(trialConditionsPanel.startSetPushButton,'Enable','off');
            set(trialConditionsPanel.abortPushButton,'Enable','on');
            set(trialConditionsPanel.statePopUpMenu,'Enable','off');
            set(trialConditionsPanel.modePopUpMenu,'Enable','off');
            set(trialConditionsPanel.percentLimbSupportEditBox,'Enable','off');
            set(trialConditionsPanel.percentAbductionMaxEditBox,'Enable','off');
            set(trialConditionsPanel.horizontalToggleButton,'Enable','off');
            set(trialConditionsPanel.verticalToggleButton,'Enable','off');
            set(trialConditionsPanel.liftToggleButton,'Enable','off');
            set(trialConditionsPanel.damperToggleButton,'Enable','off');
            set(trialConditionsPanel.coefficientEditBox,'Enable','off');
            set(experimentMenubar,'Enable','off');
            
            % "Experiment Running" is displayed as the experiment status
            set(experimentStatus,'String','Experiment Running');
            
        end
        
        % needed?
        function obj = RunWorkspace(obj)
            % --- NOT IMPLEMENTED YET ---
        end
        
        %% record data
        function obj = RecordData(obj, robot, display )
            % save: sample, period between current and previous sample,
            % xyz end effector position, xyz velocity, xyz force, xyz torque,
            % shoulder flexion angle, elbow flexion angle, shoulder abduction
            % angle, xyz hand position
            obj.data( 1, obj.currentIteration ) = obj.currentIteration;
            obj.data( 2, obj.currentIteration ) = obj.currentPeriod;
            obj.data( 3:5, obj.currentIteration ) = robot.endEffectorPosition;
            obj.data( 6:8, obj.currentIteration ) = robot.endEffectorVelocity;
            obj.data( 9:11, obj.currentIteration ) = robot.endEffectorForce;
            obj.data( 12:14, obj.currentIteration ) = robot.endEffectorTorque;
            obj.data( 15, obj.currentIteration ) = display.shoulderFlexionAngle;    % do i use IK or end effector rotation from robot?
            obj.data( 16, obj.currentIteration ) = display.elbowAngle;
            obj.data( 17, obj.currentIteration ) = display.shoulderAbductionAngle;
            obj.data( 18, obj.currentIteration ) = robot.endEffectorRotation(1);
            obj.data( 19:21, obj.currentIteration ) = display.fingerTipPosition;
            obj.data( 22:24, obj.currentIteration ) = display.shoulderPosition;
            obj.data( 25, obj.currentIteration ) = obj.isArmOnTable;
            
        end
        
        
        %% on experiment end
        function obj = Terminate( obj, mainWindow, display, trialParameters, emgChannels, emgMaxesCheckBox, setTargets, nidaq, quanser, judp )
            trialConditionsPanel = mainWindow.trialConditionsPanel;
            statusPanel = mainWindow.statusPanel;
            daqParametersPanel = mainWindow.daqParametersPanel;
            
            %set(display.planeHandle,'FaceColor',[0.00, 0.66, 0.60]); % turn table back to blue
			% send 'table color blue'
			
            if obj.periodId ~= 0
                unusedVariable = toc(obj.periodId);
            end
            
            %set( display.fingerTipPositionTraceHandle, 'Visible','off' );
            % turn off the trace of the finger tip
            % send 'trace visible off'
			% send 'trace empty'
			%judp.Write('trace visible off');
            judp.Write('trace empty');
            
            display.fingerTipPositionTrace = zeros(3,300);
            
            %set( display.targetSphereHandle, 'Visible', 'off' ); 
            %set( display.homeSphereHandle, 'Visible', 'off' ); 
            % turn off the target and home spheres in the display
            % send 'target visible off'
			% send 'home visible off'
            judp.Write('target visible off');
            judp.Write('home visible off');
			
            % discard unused iterations
            if obj.currentIteration < obj.totalIterations
                try
                    obj.data( :, obj.currentIteration+1 : obj.totalIterations ) = [];
                catch
                end
            end
            
            % folder data is saved to
            folder = get( statusPanel.secondColumn(11), 'String');
            if iscell(folder)
                folder = folder{1};
            end
            
            % get filename
            filename = get( daqParametersPanel.filenameEditBox, 'String' );
            %filename = [ filename ];
            
            % Write haptic master data to file
            trialData = obj.data;
            
            save([folder '\' filename],'trialData');
            
            % save target information
            targetData{1,1} = 'home';
            targetData{1,2} = 'target';
            targetData{2,1} = display.home.position(1);
            targetData{2,2} = display.target.position(1);
            targetData{3,1} = display.home.position(2);
            targetData{3,2} = display.target.position(2);
            targetData{4,1} = display.home.position(3);
            targetData{4,2} = display.target.position(3);
            save([folder '\' filename '_target.mat'], 'targetData');
            
            % display EMG trial data in EMG channels window
            daqDeviceString = get(daqParametersPanel.daqDevicePopUpMenu,'String');
            daqDeviceValue = get(daqParametersPanel.daqDevicePopUpMenu,'Value');
            daqDeviceSelected = daqDeviceString{daqDeviceValue};
            
            trialNumber = str2double( get(statusPanel.secondColumn(5),'String') );
            
            %obj.DisplayEmgTrialData( daqDeviceSelected, nidaq, quanser, mainWindow, filename, emgChannels, emgMaxesCheckBox, trialNumber );
            
            newTrialNumber = obj.IncrementTrialNumber( trialNumber, statusPanel.secondColumn(5) );
            
            % Shutdown the trial and enable buttons on the interface
            obj.Shutdown(trialConditionsPanel, mainWindow.experimentMenubar, statusPanel.secondColumn(10) );
            
            % reset variables
            obj.data = zeros( obj.numberOfVariables, obj.totalIterations );
            obj.currentIteration = 0;
            obj.currentPeriod = 0;
            obj.isRecordingData = 0;
            obj.currentTrialTime = 0;
            obj.isArmOnTable = 0;
            display.fingerTipPositionTraceIteration = 0;
            
            % ask to end experiment if trials completed equals total trials
            totalTrialsNumber = str2double( get(statusPanel.totalTrials,'String') );
            if newTrialNumber >= totalTrialsNumber
				obj.RunMoreTrials( trialParameters.figureHandle, statusPanel.secondColumn(5), mainWindow.protocolPanel, folder );  
                obj.isStartSetSelected = 0;
                
            else
                if obj.isStartSetSelected == 1
                    obj.Start( mainWindow, display, setTargets, nidaq, quanser );
                end
            end
        end
        
        
        function obj = Shutdown(obj, trialConditionsPanel, experimentMenubar, experimentStatus)
            set(trialConditionsPanel.startTrialPushButton,'Enable','on');
            set(trialConditionsPanel.startSetPushButton,'Enable','on');
            set(trialConditionsPanel.abortPushButton,'Enable','off');
            set(trialConditionsPanel.statePopUpMenu,'Enable','on');
            set(trialConditionsPanel.modePopUpMenu,'Enable','on');
            set(trialConditionsPanel.percentLimbSupportEditBox,'Enable','on');
            set(trialConditionsPanel.percentAbductionMaxEditBox,'Enable','on');
            set(trialConditionsPanel.horizontalToggleButton,'Enable','on');
            set(trialConditionsPanel.verticalToggleButton,'Enable','on');
            set(trialConditionsPanel.liftToggleButton,'Enable','on');
            set(trialConditionsPanel.damperToggleButton,'Enable','on');
            set(trialConditionsPanel.coefficientEditBox,'Enable','on');
            
            set(experimentMenubar,'Enable','on');
            
            % "Trial complete" is displayed as the experiment status in the status panel in the main window
            set(experimentStatus,'String','Trial Complete');
        end
        
        
        %% save text document outlining the experimental protocol
        function obj = SaveProtocol(obj,protocolPanel, folder )
            
            experimentalVariables = get(protocolPanel.experimentalVariablesListbox,'String');
            values = get( protocolPanel.valuesEditBox, 'userData' );
            values = struct2cell(values);
            
            fid = fopen([folder '\experimental_protocol.txt'], 'a');
            
            for j = 1 : length(experimentalVariables)
                
                fprintf(fid, '%s:\r\n',experimentalVariables{j});
                switch experimentalVariables{j}
                    
                    case '% support'
                        limbSupportValues = values{1};
                        for k=1:length(limbSupportValues)
                            fprintf( fid, '%s\r\n', limbSupportValues{k} );
                        end
                        fprintf( fid, '\n' );
                        
                    case 'plane (degrees)'
                        planeValues = values{2};
                        for k=1:length(planeValues)
                            fprintf( fid, '%s\n', planeValues{k} );
                        end
                        fprintf( fid, '\n' );
                        
                    case 'target (cm)'
                        targetValues = values{3};
                        for k=1:length(targetValues)
                            fprintf( fid, '%s\n', targetValues{k} );
                        end
                        fprintf( fid, '\n' );
                        
                    otherwise
                        disp('too many experimental variables');
                end
            end
            fprintf(fid, '-------------------------\r\n\r\n');
            fclose(fid);
            
        end
        
        function [ newTrialNumber, obj ] = IncrementTrialNumber( obj, trialNumber, trialStatus )
            % trials completed is incremented and replaced - precision
            % should always be two digits
            newTrialNumber = trialNumber + 1;
            if newTrialNumber < 10
                newTrialNumberString = strcat('0', num2str(newTrialNumber));
            else
                newTrialNumberString = num2str(newTrialNumber);
            end
            set( trialStatus, 'String', newTrialNumberString );
        end

		
		function obj = RunMoreTrials( obj, trialParametersFigure, trialStatus, protocolPanel, folder )
            
            % ask user if they want to run more trials
            default = 'No';
            answer = questdlg('You have completed the designated number of trials.  Would you like to run more trials for this experiment?', ...
                'Trials are finished',...
                'Yes', 'No', default);
            if strcmp(answer,'Yes')
                
                set( trialParametersFigure, 'Visible','On' );
                
            elseif strcmp(answer,'No')
                
                % set trials completed to 0
                set( trialStatus, 'String','00' );
                obj = obj.SaveProtocol(protocolPanel, folder );
            else
                disp('Incohorent answer');
            end
            
        end

        
		function obj = DisplayEmgTrialData( obj, daqDeviceSelected, nidaq, quanser, mainWindow, filename, emgChannels, emgMaxesCheckBox, trialNumber )
            
            if strcmp(daqDeviceSelected,'Quanser') %#ok<ALIGN>
			    quanser.Stop;
			    [ data, samples_read ] = quanser.ReadData;
			    data = data';
			    t = ( 1 : length(data(:,1)) ) / quanser.frequency;
			    
			    % save data
			    % folder
			    folder = get( mainWindow.statusPanel.secondColumn(11), 'String');
			    if iscell(folder)
			        folder = folder{1};
			    end
			
			    save( [folder '\' filename '_emg' ], 'data' );
			
			else  % nidaq
			    [data,t] = getdata(nidaq.analogInputObject);
            end
            
            samplingRate = str2double( get( mainWindow.daqParametersPanel.samplingRateEditBox, 'String' ) );
            meandata = obj.meanfilt( abs(data), 0.25*samplingRate );
            % meandata=data;
            
            for i=1:size(data,2)
                
                % clear selected axes
                cla(emgChannels.axis(i));
                
                % plot emg data on axes using line
                axes(emgChannels.axis(i));
                line(t,data(:,i));

                % label axes with max of emg data and max of filtered emg data
                maxRawData = max(abs(data(:,i)));
                maxFilteredData = max(meandata(:,i));
                x = length(data(:,1))/samplingRate*0.6;
                y = maxRawData;
                text( x,y, num2str(maxRawData,'%6.4f') );
                x = length(data(:,1))/samplingRate*0.8;
                text( x,y, num2str(maxFilteredData,'%6.4f') );
            end
            drawnow
            
            % if emg maxes is selected
            isSelected = get( emgMaxesCheckBox, 'Value' );
            if isSelected == 1

                rowString = num2str(trialNumber+1);
                % try to write
                try
                    rc=ddepoke(obj.emgMaxesExcelHandle,['r1c' rowString ':r1c' rowString],['trial' rowString]);
                    crange=['r2c' rowString ':r' num2str(size(data,2)+1) 'c' rowString];
                    rc=ddepoke(obj.emgMaxesExcelHandle,crange,max(abs(data))');
                % if failed, uncheck emg maxes box
                catch
                    set( emgMaxesCheckBox, 'Value',0 );
                end
                
            end
            
        end
        
        
        function [y,obj] = meanfilt(obj,x,n)
            
            %MEANFILT  One dimensional mean filter.
            %   Y = MEANFILT(X,N) returns the output of the order N, one dimensional
            %   moving average 2-sided filtering of vector X.  Y is the same length
            %   as X;
            %
            %   If you do not specify N, MEANFILT uses a default of N = 3.
            
            %   Author(s): Ana Maria Acosta, 2-26-01
            
            if nargin < 2
                n=3;
            end
            if all(size(x) > 1)
                y = zeros(size(x));
                for i = 1:size(x,2)
                    y(:,i) = obj.meanfilt(x(:,i),n);
                end
                return
            end
            
            % Two-sided filtering to avoid phase shifts in the output
            y=obj.filter22(ones(n,1)/n,x,2);
            
            % transpose if necessary
            if size(x,1) == 1  % if x is a row vector ...
                y = y.';
            end
            
        end
    end
    methods (Static)
        function y = filter22(fil,x,numsides)
            %
            %	THIS FUNCTION PERFORMS 2-SIDED AS WELL AS ONE SIDED
            % 	FILTERING.  NOTE THAT FOR A ONE-SIDED FILTER, THE
            %	FIRST length(fil) POINTS ARE GARBAGE, AND FOR A TWO
            %	SIDED FILTER, THE FIRST AND LAST length(fil)/2
            %	POINTS ARE USELESS.
            %
            %	USAGE	: y = filter22(fil,x,numsides)
            %
            % EJP Jan 1991
            %
            [ri,ci]= size(x);
            if (ci > 1)
                x = x';
            end
            numpts = length(x);
            halflen = ceil(length(fil)/2);
            if numsides == 2
                xxx=zeros(size(1:halflen))';
                x = [x ; xxx];
                y = filter(fil,1,x);
                y = y(halflen:numpts + halflen - 1);
            else
                y=filter(fil,1,x);
            end
            if (ci > 1)
                y = y';
            end
            
        end
    end
end
    



