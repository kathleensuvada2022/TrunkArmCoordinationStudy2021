%% function declaring the callback functions for each component
function mainWindow = CreateTrialConditionsPanelCallbacks( mainWindow, robot,...
    haptic, display, initializeRobot, participantParameters, trialParameters,...
    experiment, timerObject, setTargets, emgChannels, nidaq, quanser, judp )

%protocolPanel = mainWindow.protocolPanel;
trialConditionsPanel = mainWindow.trialConditionsPanel;

set(trialConditionsPanel.statePopUpMenu,...
    'Callback',{@statePopUpMenu_Callback,mainWindow,robot,haptic, timerObject});
set(trialConditionsPanel.modePopUpMenu,...
    'Callback',{@modePopUpMenu_Callback,mainWindow,robot, initializeRobot});

set(trialConditionsPanel.percentLimbSupportEditBox,...
    'Callback',{@percentLimbSupportEditBox_Callback,mainWindow,robot,participantParameters,timerObject});
set(trialConditionsPanel.percentAbductionMaxEditBox,...
    'Callback',{@percentAbductionMaxEditBox_Callback,mainWindow,robot,participantParameters,initializeRobot,trialParameters, timerObject});

set(trialConditionsPanel.horizontalToggleButton,...
    'Callback',{@horizontalToggleButton_Callback,mainWindow,robot,haptic,display, judp});
set(trialConditionsPanel.verticalToggleButton,...
    'Callback',{@verticalToggleButton_Callback,mainWindow,robot,haptic,display});
set(trialConditionsPanel.liftToggleButton,...
    'Callback',{@liftToggleButton_Callback, mainWindow, setTargets, display, haptic, experiment});
    
set(trialConditionsPanel.damperToggleButton,...
    'Callback',{@damperToggleButton_Callback,mainWindow,robot});
set(trialConditionsPanel.coefficientEditBox,...
    'Callback',{@coefficientEditBox_Callback,mainWindow,robot});


set(trialConditionsPanel.externalForceEditBox(1),...
    'Callback',{@externalForceEditBox_Callback,mainWindow,robot,participantParameters,initializeRobot,timerObject});
set(trialConditionsPanel.externalForceEditBox(2),...
    'Callback',{@externalForceEditBox_Callback,mainWindow,robot,participantParameters,initializeRobot,timerObject});
set(trialConditionsPanel.externalForceEditBox(3),...
    'Callback',{@externalForceEditBox_Callback,mainWindow,robot,participantParameters,initializeRobot,timerObject});

set(trialConditionsPanel.startTrialPushButton,...
    'Callback',{@startTrialPushButton_Callback,mainWindow,robot,trialParameters,experiment,display,setTargets,nidaq, quanser, judp});
set(trialConditionsPanel.startSetPushButton,...
    'Callback',{@startSetPushButton_Callback,mainWindow,robot,trialParameters,experiment,display,setTargets,nidaq, quanser, judp});
set(trialConditionsPanel.abortPushButton,...
    'Callback',{@abortPushButton_Callback,mainWindow,robot,experiment,display, trialParameters, setTargets, emgChannels,nidaq, quanser, judp});

end

%% callbacks
function statePopUpMenu_Callback(hObject, eventdata, mainWindow, robot, haptic, timerObject )

stop(timerObject);

% get chosen state
stateString = get(hObject,'String');
stateValue = get(hObject,'Value');
newState = stateString{stateValue};

% switch state in HapticMaster
robot.SwitchState(newState);

switch robot.currentState
    case 'off'
        % make state list - off, initialise, (normal and fixed if isInitialed = 1?
        set(hObject,'String',{'off','initialised','normal'}); % normal and fixed?
    
    case 'initialised'
        % make state list - initialised, normal, fixed and off
        set(hObject,'String',{'initialised','normal','fixed','off'});
        robot.RemoveAllHapticEffects;
        haptic.isHorizontalEffectCreated = 0;
        haptic.isHorizontalEffectCreated = haptic.Create( haptic.horizontalEffectName, haptic.isHorizontalEffectCreated,...
            haptic.horizontalEffectPosition, haptic.horizontalEffectSize );
        haptic.isVerticalEffectCreated = 0;
        haptic.isVerticalEffectCreated = haptic.Create( haptic.verticalEffectName, haptic.isVerticalEffectCreated,...
            haptic.verticalEffectPosition, haptic.verticalEffectSize );
        robot.isBiasForceCreated = 0;
        robot.CreateBiasForce;
        robot.isSpringCreated = 0;
        robot.CreateSpring;
        robot.CreateDamper;
                    
    case 'normal'
        % make state list
        set(hObject,'String',{'normal','fixed','off'});
    
    case 'fixed'
        % make state list
        set(hObject,'String',{'fixed','normal','off'});
    
    otherwise
        disp('Error detecting current state of HapticMaster. Please try again.');
end

set(hObject,'Value',1);

start(timerObject);

end

%%

function modePopUpMenu_Callback(hObject, eventdata, mainWindow, robot, initializeRobot )
end


function percentLimbSupportEditBox_Callback(hObject, eventdata, mainWindow, robot, participantParameters, timerObject )

stop(timerObject);


percentSupportString = get(hObject,'String');
percentSupportValue = str2double(percentSupportString);

% if the value provided causes the a force more than 2x limbweight (up or
% down), ask the user if that's what they intended
if abs(percentSupportValue) > 100
    answer = questdlg('This value is more than twice limbweight.  Are you sure you want to apply this much force?', ...
                         'Value is twice limbweight', 'Yes', 'No');

    if strcmp(answer,'No')
        % make the string empty in the edit box
        set(hObject,'String','');
        robot.externalForce = [ 0, 0, 0 ];
        robot.SetExternalForce(robot.externalForce);
        return;
    end
end
    
% compute how much external force is needed to provide the % limb support
% desired in the z direction
limbWeight = str2double(get( participantParameters.limbWeightEditBox, 'String' ));
robot.externalForce(3) = limbWeight * (percentSupportValue/100);

% set external force 
robot.SetExternalForce(robot.externalForce);

start(timerObject);

% display values in external force edit boxes
set( mainWindow.trialConditionsPanel.externalForceEditBox(1), 'String', num2str(robot.externalForce(1)) );
set( mainWindow.trialConditionsPanel.externalForceEditBox(2), 'String', num2str(robot.externalForce(2)) );
set( mainWindow.trialConditionsPanel.externalForceEditBox(3), 'String', num2str(robot.externalForce(3)) );

% display value for external force provided in status panel variable
set( mainWindow.statusPanel.secondColumn(9), 'String', [num2str(robot.externalForce(1)) '  ' num2str(robot.externalForce(2)) '  ' num2str(robot.externalForce(3))] );

end


function percentAbductionMaxEditBox_Callback(hObject, eventdata, mainWindow, robot, participantParameters, initializeRobot, trialParameters, timerObject )

stop(timerObject);

isLiftSelected = get(mainWindow.trialConditionsPanel.liftToggleButton,'Value');
percentAbductionMaxString = get(hObject,'String');

if  isLiftSelected == 1   ||   isempty(percentAbductionMaxString)
    
    if isempty(percentAbductionMaxString)
        abductionForceProvided(1:3) = 0;
    else
        percentAbductionMaxValue = str2double(percentAbductionMaxString);
        
        limbWeight = str2double(get( participantParameters.limbWeightEditBox, 'String' ));
        
        abductionMax = str2double( get( participantParameters.abductionMaxForceEditBox, 'String' ) );
        
        abductionForceProvided(3) = limbWeight - (percentAbductionMaxValue/100) * abductionMax;    % 0% is weightless, 12.5 means subject lifts 12.5% of limb weight
        
        % if the value provided causes a force more than 2x limbweight (up or
        % down), ask the user if that's what they intended
        if abs( abductionForceProvided(3) ) > abs( 2 * limbWeight )
            default='No';
            answer = questdlg('This value is more than twice limbweight.  Are you sure you want to apply this much force?', ...
                'Value is twice limbweight',...
                'Yes', 'No',default);
            if ~strcmp(answer,'No')
                % make the string empty in the edit box
                set(hObject,'String','');
                abductionForceProvided = [ 0, 0, 0 ];
            end
        end
        
    end
else
    disp('Please click the lift button');
    set(hObject,'String','');
    return;
end

robot.externalForce = abductionForceProvided;

% set external force 
robot.SetExternalForce(abductionForceProvided);

start(timerObject);

% display values in external force edit boxes
set( mainWindow.trialConditionsPanel.externalForceEditBox(1), 'String', num2str(robot.externalForce(1)) );
set( mainWindow.trialConditionsPanel.externalForceEditBox(2), 'String', num2str(robot.externalForce(2)) );
set( mainWindow.trialConditionsPanel.externalForceEditBox(3), 'String', num2str(robot.externalForce(3)) );

% display value for external force provided in status panel variable
set( mainWindow.statusPanel.secondColumn(9), 'String', [num2str(robot.externalForce(1)) '  ' num2str(robot.externalForce(2)) '  ' num2str(robot.externalForce(3))] );

end


function horizontalToggleButton_Callback(hObject, eventdata, mainWindow, robot, haptic, display, judp)

isHorizontalSelected = get( hObject, 'Value' );

if isHorizontalSelected == 1
    % check to see if the arm is high enough to turn on the haptic haptic
    arm = get( mainWindow.statusPanel.secondColumn(6), 'String' );
    robot.SetForceGetInfo(arm);
    if robot.endEffectorPosition(3) > haptic.horizontalEffectPosition(3)
        % turn on horizontal haptic effect
        haptic.isHorizontalEffectEnabled = haptic.Enable( haptic.isHorizontalEffectCreated, haptic.isHorizontalEffectEnabled, haptic.horizontalEffectName );
        
        %set( display.planeHandle, 'Visible','On');
        % turn the graphical table on in blender
		% send 'table visible on'
        judp.Write('table visible on');
    else
        % turn off horizontal haptic effect (table)
        disp('Please raise your arm above the horizontal haptic effect');   %make dialog box for this error?
        set(hObject,'Value',0);  % turn toggle button back off
    end
else
    % turn off horizontal effect
    haptic.isHorizontalEffectEnabled = haptic.Disable( haptic.isHorizontalEffectCreated, haptic.isHorizontalEffectEnabled, haptic.horizontalEffectName );
    
    %set( display.planeHandle, 'Visible','Off');
    % turn the graphical table off in blender
	% send 'table visible off'
    judp.Write('table visible off');
end

end


function verticalToggleButton_Callback(hObject, eventdata, mainWindow, robot, haptic, display)

isVerticalSelected = get( hObject, 'Value' );

if isVerticalSelected == 1
    % turn on vertical haptic effect
    haptic.isVerticalEffectEnabled = haptic.Enable( haptic.isVerticalEffectCreated, haptic.isVerticalEffectEnabled, haptic.verticalEffectName );
    
else
    % turn off vertical haptic effect
    haptic.isVerticalEffectEnabled = haptic.Disable( haptic.isVerticalEffectCreated, haptic.isVerticalEffectEnabled, haptic.verticalEffectName );
end

end


function liftToggleButton_Callback(hObject, eventdata, mainWindow, setTargets, display, haptic, experiment )

isLiftSelected = get(hObject,'Value');

if isLiftSelected
    offset = -display.radius - 0.01; %-0.06
else
    offset = display.radius + 0.01;
end
haptic.horizontalEffectPosition(3) = haptic.horizontalEffectPosition(3) + offset;
experiment.tableZ = experiment.tableZ + offset;

% turn horizontal haptic effect off
if haptic.isHorizontalEffectEnabled == 1
    haptic.isHorizontalEffectEnabled = haptic.Disable( haptic.isHorizontalEffectCreated, haptic.isHorizontalEffectEnabled, haptic.horizontalEffectName );
end
set( mainWindow.trialConditionsPanel.horizontalToggleButton, 'Value', 0 );

%set(display.planeHandle, 'Visible', 'off' );
% make the table invisible
% send 'table visible off'

% set position of horizontal haptic effect in robot
haptic.SetPosition( haptic.horizontalEffectPosition, haptic.horizontalEffectName );

% set visual position of haptic table
zdata = get( display.planeHandle, 'ZData' );
zdata = zdata + offset;
set( display.planeHandle, 'ZData', zdata );
% send 'table position x y z' - use haptic.horizontalEffectPosition(1:3)

end


function damperToggleButton_Callback(hObject, eventdata, mainWindow, robot)

isDamperSelected = get( hObject, 'Value' );

if robot.isDamperCreated
    % enable damper if the button is clicked
    if isDamperSelected
        
        robot.EnableDamper;
        disp('Damper enabled');
   
    % disable damper if the button is unclicked
    else
    
        robot.DisableDamper;
        disp('Damper disabled');
    end
else
    set( hObject, 'Value',0 );
end


end


function coefficientEditBox_Callback(hObject, eventdata, mainWindow,robot)
% set the coefficient in the xy plane for the damper if it's created

value = str2double( get( hObject, 'String' ) );
damperCoefficient = [ value, value, 0 ];

if robot.isDamperCreated
    robot.SetDamperCoefficient(damperCoefficient);
    disp('Damper coefficient in the horizontal plane is set');
end

end


function externalForceEditBox_Callback(hObject, eventdata, mainWindow,robot,participantParameters,initializeRobot, timerObject)

% get all 3 forces
externalForce(1) = str2double( get( mainWindow.trialConditionsPanel.externalForceEditBox(1), 'String' ) );
externalForce(2) = str2double( get( mainWindow.trialConditionsPanel.externalForceEditBox(2), 'String' ) );
externalForce(3) = str2double( get( mainWindow.trialConditionsPanel.externalForceEditBox(3), 'String' ) );

% set external force 
robot.externalForce = externalForce;
robot.SetExternalForce(externalForce);

% display value for external force provided in status panel variable
set( mainWindow.statusPanel.secondColumn(9), 'String', [num2str(robot.externalForce(1)) '  ' num2str(robot.externalForce(2)) '  ' num2str(robot.externalForce(3))] );

end


function startTrialPushButton_Callback(hObject, eventdata, mainWindow, robot, trialParameters, experiment, display, setTargets, nidaq, quanser, judp )
% start experiment
experiment.Start(mainWindow, display, setTargets, nidaq, quanser, judp);

end


function startSetPushButton_Callback(hObject, eventdata, mainWindow, robot, trialParameters, experiment, display, setTargets, nidaq, quanser, judp )

experiment.isStartSetSelected = 1;

% start experiment
experiment.Start(mainWindow, display, setTargets, nidaq, quanser, judp);

end


function abortPushButton_Callback(hObject, eventdata, mainWindow, robot, experiment, display, trialParameters, setTargets, emgChannels, nidaq, quanser, judp )
%% abort experiment
experiment.isStartSetSelected = 0;
experiment.Terminate( mainWindow, display, trialParameters, emgChannels, mainWindow.daqParametersPanel.emgMaxesCheckBox, setTargets, nidaq, quanser, judp );

end

